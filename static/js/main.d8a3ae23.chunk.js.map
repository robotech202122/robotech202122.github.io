{"version":3,"sources":["components/Menu.js","components/WalletAddress.js","App.js","contract/address.js","contract/execute.js","components/LoadingIndicator/index.js","pages/play.js","pages/guide.js","contract/query.js","pages/leaderboard.js","index.js"],"names":["menu_options","name","link","Menu","className","map","mb","index","to","WalletAddress","connectedWallet","useConnectedWallet","terraAddress","slice","App","useWallet","status","connect","disconnect","availableConnectTypes","console","log","WalletStatus","WALLET_NOT_CONNECTED","src","alt","WALLET_CONNECTED","type","onClick","contractAddress","wallet","config","network","clicker","contractAddresses","default","sleep","ms","Promise","resolve","setTimeout","until","Date","now","untilInterval","_exec","msg","fee","Fee","uluna","a","lcd","LCDClient","URL","chainID","post","msgs","MsgExecuteContract","walletAddress","result","tx","txInfo","txhash","Error","setScore","score","upsert_score","LoadingIndicator","Play","useState","time","setTime","top","left","targetPosition","setTargetPosition","targetPosition1","setTargetPosition1","loading","setLoading","useEffect","unsubscribe","setInterval","display","alert","submitScore","execute","window","location","href","id","style","audio","Audio","volume","play","Math","floor","random","Guide","getScores","wasm","contractQuery","get_scores","Leaderboard","scores","setScores","fetchScores","query","then","length","toString","padStart","renderScores","TWITTER_HANDLE","TWITTER_LINK","getChainOptions","chainOptions","ReactDOM","render","StrictMode","path","element","target","rel","document","getElementById"],"mappings":"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","file":"static/js/main.d8a3ae23.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\n\nconst menu_options = [\n  { name: 'Play', link: '/play' },\n  { name: 'Leaderboard', link: '/leaderboard' },\n  { name: 'How to play', link: '/guide' },\n];\n\nconst Menu = () => {\n\n  const renderMenu = () => {\n    return menu_options.map((mb, index) => {\n\n      const { name, link } = mb;\n      \n      return (\n        <Link to={link} key={index} className=\"menu-item\">\n          <span className=\"item-text\">{name}</span>\n        </Link>\n      );\n    });\n  };\n\n  return <div className=\"game-menu\">{renderMenu()}</div>;\n};\n\nexport default Menu;","import { useConnectedWallet } from '@terra-money/wallet-provider';\n\nconst WalletAddress = () => {\n  const connectedWallet = useConnectedWallet();\n  const { terraAddress } = { ...connectedWallet };\n  \n  return (\n    <div>\n      {terraAddress && (\n        <button className=\"wallet-address\">\n          {terraAddress.slice(0, 5) + '...' + terraAddress.slice(-4)}\n        </button>\n      )}\n    </div>\n  );\n};\n\nexport default WalletAddress;","import './App.css';\n//Bring in the required hooks and possible wallet states\nimport { useWallet, WalletStatus } from \"@terra-money/wallet-provider\";\n\nimport Menu from './components/Menu';\nimport WalletAddress from './components/WalletAddress';\n\nfunction App() {\n  // Current wallet status, connect & disconnect functions, available connections\n  const { status, connect, disconnect, availableConnectTypes } = useWallet();\n    \n  const renderConnectButton = () => {\n    if (status === WalletStatus.WALLET_NOT_CONNECTED) {\n      return (\n        <div className=\"connect-wallet-div\">\n          <button\n            type=\"button\"\n            key={`connect-EXTENSION`}\n            onClick={() => connect(\"EXTENSION\")}\n            className=\"cta-button connect-wallet-button\"\n          >\n            Connect wallet\n          </button>\n        </div>\n      );\n    }\n    // Check if wallet is connect\n    else if (status === WalletStatus.WALLET_CONNECTED) {\n      return (\n        <button\n          type=\"button\"\n          onClick={() => disconnect()}\n          className=\"cta-button connect-wallet-button\"\n        >\n          Disconnect\n        </button>\n      );\n    }\n  };\n\n  // Let's take a look at what the starting states are!\n  console.log(\"Wallet status is \", status);\n  console.log(\"Available connection types:\", availableConnectTypes);\n\n  // Nothing changes here :D\n  return (\n    <main className=\"App\">\n      <header>\n        <div className=\"header-titles\">\n          <h1>⚔ Goblin War ⚔</h1>\n          <p>Only you can save us from Goblin town</p>\n        </div>\n        <WalletAddress />\n      </header>\n\n      {/* If not connected, show the goblin GIF! */}\n      {status === WalletStatus.WALLET_NOT_CONNECTED && (\n        <div>\n          <img\n            src=\"https://media.giphy.com/media/B19AYwNXoXtcs/giphy.gif\"\n            alt=\"Goblin gif\"\n          />\n        </div>\n      )}\n\n      {/* Show the menu after connection */}\n      {status === WalletStatus.WALLET_CONNECTED && (\n          <div className=\"game-menu-container\">\n            <Menu />\n          </div>\n        )}\n\n      {renderConnectButton()}\n    </main>\n  );\n}\n\nexport default App;","import config from \"../refs.terrain.json\"\n\nexport const contractAddress = (wallet) => config[wallet.network.name].clicker.contractAddresses.default","import { LCDClient, MsgExecuteContract, Fee } from '@terra-money/terra.js';\nimport { contractAddress } from './address';\n\n// ==== utils ====\n\nconst sleep = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nconst until = Date.now() + 1000 * 60 * 60;\nconst untilInterval = Date.now() + 1000 * 60;\n\nconst _exec =\n  (msg, fee = new Fee(200000, { uluna: 10000 })) =>\n  async (wallet) => {\n    const lcd = new LCDClient({\n      URL: wallet.network.lcd,\n      chainID: wallet.network.chainID,\n    });\n\n    const { result } = await wallet.post({\n      fee,\n      msgs: [\n        new MsgExecuteContract(\n          wallet.walletAddress,\n          contractAddress(wallet),\n          msg\n        ),\n      ],\n    });\n\n    while (true) {\n      try {\n        return await lcd.tx.txInfo(result.txhash);\n      } catch (e) {\n        if (Date.now() < untilInterval) {\n          await sleep(500);\n        } else if (Date.now() < until) {\n          await sleep(1000 * 10);\n        } else {\n          throw new Error(\n            `Transaction queued. To verify the status, please check the transaction hash: ${result.txhash}`\n          );\n        }\n      }\n    }\n  };\n\n// ==== execute contract ====\n// THIS IS ALL I ADDED!!!\nexport const setScore = async (wallet, score) =>\n  _exec({ upsert_score: { score } })(wallet);","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;","/*const Play = () => {\n}\n\nexport default Play;*/\n/*\nimport React, { useState, useEffect } from \"react\";\nimport * as execute from '../contract/execute';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\n\nconst Play = () => {\n  const connectedWallet = useConnectedWallet();\n  const playTime = 15;\n\n  const [score, setScore] = useState(0);\n  const [time, setTime] = useState(playTime);\n\n  const submitScore = async () => {\n    if (connectedWallet && connectedWallet.network.name === 'localterra') {\n      // This will return the transaction object on confirmation\n      const tx = await execute.setScore(connectedWallet, score);\n      console.log(tx);\n      // Once the transaction is confirmed, we let the user know\n      alert('Score submitted!');\n    }\n  };\n\n  return (\n    <div className=\"score-board-container\">\n      <div className=\"play-container\">\n        <span>Score: {score}</span>\n        <span>Fight!</span>\n        <span>Time left: {time} s</span>\n      </div>\n\n      <button className=\"cta-button connect-wallet-button\" onClick={() => setScore(score => score + 1)}>+1 score</button>\n\n      <button className=\"cta-button connect-wallet-button\" onClick={submitScore}>Submit score</button>\n    </div>\n  )\n}\n\nexport default Play;\n*/\n\nimport React, { useState, useEffect } from \"react\";\nimport * as execute from '../contract/execute';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport LoadingIndicator from '../components/LoadingIndicator';\n\nconst Play = () => {\n  const connectedWallet = useConnectedWallet();\n  // Configure this as you want, I like shorter games\n  const playTime = 15;\n\n  const [time, setTime] = useState(playTime);\n  const [gameOver, setGameOver] = useState(false);\n  // We use this to track where the target is on the screen\n  const [targetPosition, setTargetPosition] = useState({ top: \"15%\", left: \"50%\" });\n  const [targetPosition1, setTargetPosition1] = useState({ top: \"25%\", left: \"75%\" });\n  const [loading, setLoading] = useState(false);\n  const [score, setScore] = useState(0);\n  \n  // Every second we're going to lower the value of time.\n  useEffect(() => {\n    const unsubscribe = setInterval(() => {\n      setTime(time => time > 0 ? time - 1 : 0);\n    }, 1000);\n    return unsubscribe;\n  }, []);\n  \n  useEffect(() => {\n    if (time === 0) {\n      setTargetPosition({ display: 'none' });\n      setTargetPosition1({ display: 'none' });\n      // Show alert to let user know it's game over\n      alert(`Game Over! Your score is ${score}. Please confirm transaction to submit score.`);\n      submitScore();\n    }\n  }, [time]);\n\n  const submitScore = async () => {\n    if (connectedWallet && connectedWallet.network.name === 'testnet') {\n      setLoading(true);\n      const tx = await execute.setScore(connectedWallet, score);\n      console.log(tx);\n      // Once the transaction is confirmed, we let the user know and navigate to the leaderboard\n      alert('Score submitted!');\n      setLoading(false);\n      window.location.href = '/leaderboard';\n    }\n  };\n\n  const handleClick = () => {\n    // OGs will know this :)\n    let audio = new Audio(\"/Zergling_explodes.mp3\");\n    \n    // Don't let it get too loud!\n    audio.volume = 0.2;\n    audio.play();\n\n    setScore(score => score + 1);\n    \n    // Play around with this to control bounds!\n    setTargetPosition({\n      top: `${Math.floor(Math.random() * 80)}%`,\n      left: `${Math.floor(Math.random() * 80)}%`\n    });\n  };\n\n  const handleClick1 = () => {\n    // OGs will know this :)\n    let audio = new Audio(\"/Zergling_explodes.mp3\");\n    \n    // Don't let it get too loud!\n    audio.volume = 0.2;\n    audio.play();\n\n    setScore(score => score + 1);\n    \n    // Play around with this to control bounds!\n    setTargetPosition1({\n      top: `${Math.floor(Math.random() * 70)}%`,\n      left: `${Math.floor(Math.random() * 70)}%`\n    });\n  };\n\n  return (\n    <div className=\"score-board-container\">\n      <div className=\"play-container\">\n        <span>Score: {score}</span>\n        <span>Fight!</span>\n        <span>Time left: {time} s</span>\n      </div>\n\n      {/* Render loading or game container */}\n      {loading ? (\n        <LoadingIndicator />\n      ) : (\n        <div className=\"game-container\">\n          {/* CHANGE THIS IMAGE! It's loaded from the public folder. */}\n          <img src={\"pepe.png\"} id=\"target\" alt=\"Target\" style={{ ...targetPosition }} onClick={handleClick} />\n          <img src={\"pepe1.png\"} id=\"target\" alt=\"Target\" style={{ ...targetPosition1 }} onClick={handleClick1} />\n          <img src=\"Marine.png\" id=\"marine-img\" alt=\"Marine\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Play;","import { Link } from 'react-router-dom';\n\nconst Guide = () => {\n  return (\n    <main className=\"App\">\n      <header>\n        <Link to=\"/\" className=\"home-link\">\n          <div className=\"header-titles\">\n            <h1>⚔ Goblin War ⚔️</h1>\n            <p>Only you can save us from Goblin town</p>\n          </div>\n        </Link>\n      </header>\n\n      <div className=\"score-board-container\">\n        <h3>How to play</h3>\n        \n        <div>\n          <span className=\"help\">\n            Click as many goblins as you can within 15 seconds!\n          </span>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nexport default Guide;","import { LCDClient } from \"@terra-money/terra.js\";\nimport { contractAddress } from \"./address\";\n\nexport const getScores = async (wallet) => {\n    console.log(\"Contract address is \", contractAddress(wallet));\n    const lcd = new LCDClient({\n        URL: wallet.network.lcd,\n        chainID: wallet.network.chainID,\n    });\n    return lcd.wasm.contractQuery(contractAddress(wallet), { get_scores: {} });\n};\n\nexport const getSpeed = async (wallet) => {\n  console.log(\"Contract address is \", contractAddress(wallet));\n  const lcd = new LCDClient({\n      URL: wallet.network.lcd,\n      chainID: wallet.network.chainID,\n  });\n  return lcd.wasm.contractQuery(contractAddress(wallet), { get_speed: {} });\n};","/*import * as query from '../contract/query';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\n\nconst Leaderboard = () => {\n  const connectedWallet = useConnectedWallet();\n  console.log(connectedWallet)\n  const fetchScores = async () => {\n    if (connectedWallet && connectedWallet.network.name === 'localterra') {\n      console.log(\"Scores fetched\", (await query.getScores(connectedWallet)).scores);\n    }\n  };\n\n  fetchScores();\n\n  return (\n    <>\n    </>\n  );\n};\n\nexport default Leaderboard;*/\nimport { Link } from 'react-router-dom';\nimport * as query from '../contract/query';\nimport { useState, useEffect } from 'react';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport WalletAddress from '../components/WalletAddress';\n\nconst Leaderboard = () => {\n  const [scores, setScores] = useState();\n  const [loading, setLoading] = useState(true);\n  const connectedWallet = useConnectedWallet();\n\n  useEffect(() => {\n    setLoading(true);\n    const fetchScores = async () => {\n      if (connectedWallet && connectedWallet.network.name === 'testnet') {      \n        return (await query.getScores(connectedWallet)).scores;\n      }\n    };\n\n    fetchScores().then(scores => {\n      setScores(scores);\n      setLoading(false);\n    });\n  }, [connectedWallet]);\n\n  const renderScores = (scores) => {\n    if (!scores || scores.length < 1) {\n      return <div> No scores available :( </div>;\n    }\n\n    return scores.map((score, index) => {\n      return (\n        <div key={index} className=\"score\">\n          {/* Format is address: score */}\n          {/* Slice address to first 5 and last 4 digits so it looks like terra...a1b2*/}\n          <span>\n            {score[0].slice(0, 5) + '...' + score[0].slice(-4)}:{' '}\n            {score[1].toString().padStart(2, '0')}\n          </span>\n        </div>\n      );\n    });\n  };\n\n  return (\n    <main className=\"App\">\n      <header>\n        <Link to=\"/\" className=\"home-link\">\n          <div className=\"header-titles\">\n            <h1>⚔ Goblin War ⚔️</h1>\n            <p>Only you can save us from Goblin town</p>\n          </div>\n        </Link>\n        <WalletAddress />\n      </header>\n\n      <div className=\"score-board-container\">\n        <h3>Scoreboard</h3>\n        {/* If loading, show loading, else render */}\n        {loading ? (\n          <div>Loading...</div>\n        ) : (\n          renderScores(scores)\n        )}\n        \n        <div></div>\n      </div>\n    </main>\n  );\n};\n\nexport default Leaderboard;","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Route, Routes, BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\nimport Play from './pages/play';\nimport Guide from './pages/guide';\nimport Leaderboard from './pages/leaderboard';\n\n// We import Wallet Provider and a util function\nimport { getChainOptions, WalletProvider } from '@terra-money/wallet-provider';\n\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// Fetch available connection options\ngetChainOptions().then((chainOptions) => {\n  ReactDOM.render(\n    <React.StrictMode>\n      {/* Wrap the app in a context provider for the wallet */}\n      <WalletProvider {...chainOptions}>\n        <div className=\"App-header\">\n          <BrowserRouter>\n            <Routes>\n              <Route path=\"/\" element={<App />} />\n              <Route path=\"/play\" element={<Play />} />\n              <Route path=\"/leaderboard\" element={<Leaderboard />} />\n              <Route path=\"/guide\" element={<Guide />} />\n            </Routes>\n          </BrowserRouter>\n\n          <div className=\"footer-container\">\n            <img\n              alt=\"Twitter Logo\"\n              className=\"twitter-logo\"\n              src=\"/twitter-logo.svg\"\n            />\n            <a\n              className=\"footer-text\"\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`Made with @${TWITTER_HANDLE}`}</a>\n          </div>\n        </div>\n      </WalletProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n});"],"sourceRoot":""}